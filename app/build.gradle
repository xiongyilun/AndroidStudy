//apply plugin: 'com.android.application'：
//
//表示使用 com.android.application 插件。
//也就是表示，这是一个 android application module 。com.android.library 表示，这是一个 android library module 。
apply plugin: 'com.android.application'
//配置所有 android 构建过程需要的参数。
android {
//用于编译的 SDK 版本。
    compileSdkVersion 23
//    用于 Gradle 编译项目的工具版本。在 SDK 中可以查看本机已安装的版本。
    buildToolsVersion "23.0.2"
// Android 项目默认设置。
    defaultConfig {
        //applicationId：应用程序包名。
        applicationId "xyl.enigma.project1"
        //最低支持 Android 版本。
        minSdkVersion 14
        //目标版本。实际上应为测试环境下测试机的 Android 版本。
        targetSdkVersion 23
        //版本号。
        versionCode 1
        //版本名称。
        versionName "1.0"
    }
    //编译类型。默认有两个： release 和 debug 。我们可以在此处添加自己的 buildTypes ，
    //可在 Build Variants 面板看到。
    buildTypes {
        release {
            //是否使用混淆。在老版本中为 runProguard ，新版本之所换名称，
            //是因为新版本支持去掉没使用到的资源文件，而 runProguard 这个名称已不合适了。
            minifyEnabled false
            //使用的混淆文件，可以使用多个混淆文件。此例中，使用了 **SDK** 中的
            //**proguard-android.txt** 文件以及当前 **module** 目录下的 **proguard-rules.pro** 文件。
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}
//用于配制引用的依赖。
dependencies {
    //引用当前 module 目录下的 libs 文件夹中的所有 .jar 文件。
   // * **compile 'com.android.support:appcompat-v7:21.0.3'**：
    //引用 **21.1.0**版本的 **appcompat-v7** （也就是常用的 **v7** library 项目）。
    //> 在 **Eclipse** 中，使用 **android support** ，需要在 SDK 中下载 **Android Support Library** 。
    // 在 Android Studio中，使用 **android support** ，需要在 SDK 中下载 **Android Support Repository** ，
    // 且项目中使用的版本不能大于 SDK 中的版本。
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.1.0'
    compile 'com.android.support:design:23.1.0'
}
